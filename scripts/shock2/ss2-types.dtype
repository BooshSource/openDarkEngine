// ******************************************************************************
// *
// *    This file is part of openDarkEngine project
// *    Copyright (C) 2005-2006 openDarkEngine team
// *
// *    This program is free software; you can redistribute it and/or modify
// *    it under the terms of the GNU General Public License as published by
// *    the Free Software Foundation; either version 2 of the License, or
// *    (at your option) any later version.
// *
// *    This program is distributed in the hope that it will be useful,
// *    but WITHOUT ANY WARRANTY; without even the implied warranty of
// *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *    GNU General Public License for more details.
// *
// *    You should have received a copy of the GNU General Public License
// *    along with this program; if not, write to the Free Software
// *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// *
// *****************************************************************************

// System Shock 2 (R) DType type definitions
// Converted from the Telliamed's xml file Shock2-structs.xml, released under GNU GPL
// Original file is copyrighted : Copyright (C) 2006 Tom N Harris <telliamed@whoopdedo.org>

bitfield aiawarenessflags {
	key "Seen" 0x01
	key "Heard" 0x02
	key "Can Raycast" 0x04
	key "Line of Sight" 0x08
	key "Blind" 0x10
	key "Deaf" 0x20
	key "Highest" 0x40
	key "First Hand" 0x80
}

enum aifleecondition : uint {
	key "Never" 0
	key "Alert 1" 1
	key "Alert 2" 2
	key "Alert 3" 3
	key "Damage" 4
	key "Threat" 5
	key "Frustrated" 6
}

enum aimode : uint {
	key "Asleep" 0
	key "Super efficient" 1
	key "Efficient" 2
	key "Normal" 3
	key "Combat" 4
	key "Dead" 5
}

enum ainonhostile : uint {
	key "Never" 0
	key "To Player" 1
	key "To Player Until Damaged" 2
	key "To Player Until Threatened" 3
	key "Until Damaged" 4
	key "Until Threatened" 5
	key "Always" 6
}

bitfield aiobjectavoidflags {
	key "Block Pathfind" 1
	key "Repel" 2
}

enum aipriority : uint {
	key "None" 0
	key "VeryLow" 1
	key "Low" 2
	key "Normal" 3
	key "High" 4
	key "VeryHigh" 5
	key "Absolute" 6
}

enum airating : uint {
	key "Null" 0
	key "Well Below Average" 1
	key "Below Average" 2
	key "Average" 3
	key "Above Average" 4
	key "Well Above Average" 5
}

enum aircapplicable : uint {
	key "None" 0
	key "Minimum" 1
	key "VeryLow" 2
	key "Low" 3
	key "Normal" 4
	key "High" 5
	key "VeryHigh" 6
}

enum aircconstraint : uint {
	key "None" 0
	key "Nearby AI" 1
	key "Misses" 2
}

enum aircfrequency : uint {
	key "Never" 0
	key "Very Rarely" 1
	key "Rarely" 2
	key "Sometimes" 3
	key "Often" 4
	key "Very Often" 5
}

enum aircmethod : uint {
	key "Straight Line" 0
	key "Arcing" 1
	key "Reflecting" 2
	key "Overhead" 3
}

enum aircpriority : uint {
	key "Very Low" 0
	key "Low" 1
	key "Moderate" 2
	key "High" 3
	key "Very High" 4
}

enum aisoundtype : uint {
	key "None" 0
	key "Inform" 1
	key "Minor anomaly" 2
	key "Major anomaly" 3
	key "Non-combat high" 4
	key "Combat high" 5
}

enum aispeed : uint {
	key "Stopped" 0
	key "Very Slow" 1
	key "Slow" 2
	key "Normal" 3
	key "Fast" 4
	key "Very Fast" 5
}

enum aiteam : uint {
	key "Good" 0
	key "Neutral" 1
	key "Bad" 2
}

enum aithreat : uint {
	key "Raised Weapon" 0
	key "Threat" 1
}

enum aivisiontype : uint {
	key "Generic" 0
	key "Camera" 1
	key "Robot" 2
	key "Human" 3
	key "Hybrid" 4
	key "Annelid" 5
}

bitfield aivisionflags {
	key "Active" 0x01
	key "No Alert 0" 0x02
	key "No Alert 1" 0x04
	key "No Alert 2" 0x08
	key "No Alert 3" 0x10
	key "Peripheral" 0x20
	key "Omni" 0x40
	key "Night Vision" 0x80
	key "Behind" 0x100
}

enum aiwatchkillcondition : uint {
	key "Never" 0
	key "After Trigger" 1
	key "After Completion" 2
}

enum aiwatchvisibility : uint {
	key "None" 0
	key "Line of Sight" 1
	key "Raycast" 2
}

enum alertlevel : uint {
	key "None" 0
	key "Low" 1
	key "Moderate" 2
	key "High" 3
}

bitfield ambienthackedflags {
	key "Environmental" 0x01
	key "No Sharp Curve" 0x02
	key "Turned Off" 0x04
	key "Once Only" 0x08
	key "Music" 0x10
	key "Synch" 0x20
	key "No Fade" 0x40
	key "Destroy Object" 0x80
	key "Auto Off" 0x100
}

enum animlightmode : uint {
	key "Alternate" 0
	key "Alternate Smoothly" 1
	key "Random" 2
	key "Min Brightness" 3
	key "Max Brightness" 4
	key "Zero Brightness" 5
	key "Brighten Smoothly" 6
	key "Dim Smoothly" 7
	key "Semi-Random" 8
	key "Flicker" 9
}

bitfield animtextureflags {
	key "Wrap" 1
	key "Randing" 2
	key "Reverse" 4
	key "Portal" 8
}

bitfield bitmapanimationflags {
	key "Kill On Completion" 1
}

enum broadcastschema : uint {
	key "None" 0
	key "Sleeping" 1
	key "Alert 0" 2
	key "Alert 1" 3
	key "Alert 2" 4
	key "Alert 3" 5
	key "Alert to 1" 6
	key "Alert to 2" 7
	key "Alert to 3" 8
	key "Spot Player" 9
	key "Alert Down" 10
	key "Lost Contact" 11
	key "Charge" 12
	key "Shoot" 13
	key "Flee" 14
	key "Friend" 15
	key "Alarm" 16
	key "Attack" 17
	key "Attack Hit" 18
	key "Block" 19
	key "Block Attempt" 20
	key "Blocked" 21
	key "Hit-No Damage" 22
	key "Hit-High Damage" 23
	key "Hit-Low Damage" 24
	key "Ambush" 25
	key "Die Loud" 26
	key "Die Soft" 27
	key "Body" 28
	key "Mising" 29
	key "Security" 30
	key "Anomaly Small" 31
	key "Anomaly Large" 32
	key "Intruder" 33
	key "Body Seen" 34
	key "Missing Seen" 35
	key "Anomaly Seen" 36
	key "Frustrated" 37
}

enum broadcasttype : uint {
	key "Normal" 0
	key "None" 1
	key "Custom" 2
}

enum playercontaintype : int {
	key "Weapon" 1000
	key "Armor" 1002
	key "Implant 1" 1003
	key "Implant 2" 1004
	key "Hack Soft" 1006
	key "Repair Soft" 1007
	key "Modify Soft" 1008
	key "Research Soft" 1009
	key "Fake Nanites" 1010
	key "Fake Cookie" 1011
	key "PDA Soft" 1012
	key "Fake Keys" 1013
	key "Compass HUD" 1014
}

enum convactor : int {
	key "Unused" -1
}

enum creaturetype : uint {
	key "Humanoid" 0
	key "Wrench" 1
	key "Avatar" 2
	key "Rumbler" 3
	key "Droid" 4
	key "Overlord" 5
	key "Arachnid" 6
	key "Monkey" 7
	key "BabyArach" 8
	key "Shodan" 9
}

enum cretposetype : uint {
	key "Tags" 0
	key "Motion" 1
}

bitfield deckregions {
	key "Medical" 0x0001
	key "Science" 0x0002
	key "Research" 0x0004
	key "Crew Quarters" 0x0008
	key "Cargo Bay" 0x0010
	key "Recreation" 0x0020
	key "Hydro A" 0x0040
	key "Hydro B" 0x0080
	key "Hydro D" 0x0100
	key "Shuttle Bay" 0x0200
	key "Cryo" 0x0400
	key "Med. Annex" 0x0800
	key "Security" 0x1000
	key "Bridge" 0x2000
	key "Cargo Bay 2" 0x4000
	key "Crew Quarters 2" 0x8000
	key "Rickenbacker" 0x10000
	key "Rickenbacker Room" 0x20000
	key "Ops Override" 0x40000
}

bitfield difficultylevels {
	key "0 (Playtest)" 0
	key "1 (Easy)" 0x02
	key "2 (Normal)" 0x04
	key "3 (Hard)" 0x08
	key "4 (Impossible)" 0x10
	key "5 (Multiplayer)" 0x20
}

enum doorstate : uint {
	key "Closed" 0
	key "Open" 1
	key "Closing" 2
	key "Opening" 3
	key "Halted" 4
}

enum eaxtype : uint {
	key "Generic" 0
	key "PaddedCell" 1
	key "Room" 2
	key "Bathroom" 3
	key "LivingRoom" 4
	key "StoneRoom" 5
	key "Auditorium" 6
	key "ConcertHall" 7
	key "Cave" 8
	key "Arena" 9
	key "Hangar" 10
	key "CarpetedHallway" 11
	key "Hallway" 12
	key "StoneCorridor" 13
	key "Alley" 14
	key "Forest" 15
	key "City" 16
	key "Mountains" 17
	key "Quarry" 18
	key "Plain" 19
	key "ParkingLot" 20
	key "SewerPipe" 21
	key "UnderWater" 22
	key "Drugged" 23
	key "Dizzy" 24
	key "Psychotic" 25
}

bitfield frobaction {
	key "Move" 0x01
	key "Script" 0x02
	key "Delete" 0x04
	key "Ignore" 0x08
	key "FocusScript" 0x10
	key "Tool Cursor" 0x20
	key "Use Ammo" 0x40
	key "Default" 0x80
	key "Deselect" 0x100
}

bitfield frobproxyflags {
	key "Do Inv" 0x01
	key "No World" 0x02
	key "Do ToolSrc" 0x04
	key "No ToolDst" 0x08
	key "Allow Direct" 0x10
}

bitfield gunanimflags {
	key "Alt Target" 1
}

bitfield gunflashflags {
	key "Attach Projectile" 1
	key "Random Bank" 2
}

enum inventoryrendertype : uint {
	key "Default" 0
	key "Alt Model" 1
	key "Alt Bitmap" 2
}

enum investigatekind : uint {
	key "Normal" 0
	key "Don't Investigate" 1
}

enum meleeweapon : uint {
	key "Pipe" 0
}

enum meshjoint : uint {
	key "None" 0
	key "Head" 1
	key "Neck" 2
	key "Abdomen" 3
	key "Butt" 4
	key "LeftShoulder" 5
	key "RightShoulder" 6
	key "LeftElbow" 7
	key "RightElbow" 8
	key "LeftWrist" 9
	key "RightWrist" 10
	key "LeftFingers" 11
	key "RightFingers" 12
	key "LeftHip" 13
	key "RightHip" 14
	key "LeftKnee" 15
	key "RightKnee" 16
	key "LeftAnkle" 17
	key "RightAnkle" 18
	key "LeftToe" 19
	key "RightToe" 20
	key "Tail" 21
}

bitfield minigamename {
	key "Player" 0x0001
	key "Slots" 0x0002
	key "Ping" 0x0004
	key "Swinekeeper" 0x0008
	key "OverWorld" 0x0010
	key "KaBacon" 0x0020
	key "Abyss" 0x0040
	key "Hogger" 0x0080
	key "TicTacToe" 0x0100
	key "Swine Hunter" 0x0200
	key "Pig Stacker" 0x0400
	key "Burro Hog" 0x0800
	key "Golf" 0x1000
}

enum motorcontrollertype : uint {
	key "GroundLocomotion" 0
	key "Combat" 1
	key "GroundAction" 2
	key "PlayerArm" 3
	key "Single" 4
}

enum networkcategorytype : uint {
	key "Local Only" 0
	key "Hosted" 1
	key "Obsolete" 2
}

enum networkhandler : uint {
	key "Host" 0
	key "Local Only" 1
	key "All Machines" 2
}

enum objectnametype : uint {
	key "Normal" 0
	key "Stack Count" 1
	key "Log Title" 2
	key "Weapon" 3
}

enum objectrendertype : uint {
	key "Normal" 0
	key "Not Rendered" 1
	key "No Lightmap" 2
	key "Editor Only" 3
}

enum objectstate : uint {
	key "Normal" 0
	key "Broken" 1
	key "Destroyed" 2
	key "Unresearched" 3
	key "Locked" 4
}

enum objectusetype : uint {
	key "Generic" 0
	key "Ammo" 1
	key "Tech" 2
}

enum particleattachtype : uint {
	key "Object" 0
	key "VHot" 1
	key "Joint" 2
	key "Submodel" 3
}

enum particlegrouptype : uint {
	key "Single-Colored Pixels" 0
	key "Multi-Colored Pixels" 1
	key "Single-Colored Squares" 2
	key "Multi-Colored Squares" 3
	key "Single-Colored Disk" 4
	key "Scaled Bitmap" 5
}

enum particlegroupanimation : uint {
	key "Launch Once" 0
	key "Launch Continually" 1
	key "Rotating Hollow Sphere" 2
	key "Rotating Sphere" 3
	key "Rotating Hollow Cube" 4
	key "Rotating Cube" 5
	key "Rotating Disk" 6
	key "Rotating Circle" 7
	key "Rotating Pyramid" 8
}

enum particlegroupmotion : uint {
	key "Immobile" 0
	key "Follow Velocity" 1
	key "Follow Velocity%26Gravity" 2
	key "Trailing Object" 3
	key "Attached to Object" 4
	key "Fire and Forget" 5
}

enum particlelaunchtype : uint {
	key "Cube" 0
	key "Sphere" 1
	key "Cylinder" 2
}

bitfield physcollisionresult {
	key "Bounce" 0x01
	key "Destroy" 0x02
	key "Slay" 0x04
	key "No Collision Sound" 0x08
	key "No Result" 0x10
	key "Full Collision Sound" 0x20
}

enum physaxistype : int {
	key "X-Axis" 0
	key "Y-Axis" 1
	key "Z-Axis" 2
}

bitfield physaxisflags {
	key "X-Axis" 1
	key "Y-Axis" 2
	key "Z-Axis" 4
}

bitfield physorientationflags {
	key "+X-Axis" 1
	key "+Y-Axis" 2
	key "+Z-Axis" 4
	key "-X-Axis" 8
	key "-Y-Axis" 16
	key "-Z-Axis" 32
}

bitfield physcontrolflags {
	key "Axis Velocity" 1
	key "Velocity" 2
	key "Rotational Velocity" 4
	key "Location" 8
	key "Rotation" 16
}

enum physmodeltype : uint {
	key "BoundingBox" 0
	key "Sphere" 1
	key "SphereHat" 2
	key "None" 3
}

bitfield playergunflags {
	key "Kick Up" 0x01
	key "Kick Down" 0x02
	key "Kick Left" 0x04
	key "Kick Right" 0x08
	key "Jolt Up" 0x10
	key "Jolt Down" 0x20
	key "Jolt Left" 0x40
	key "Jolt Right" 0x80
	key "Delayed Burst" 0x100
}

enum playerguntype : uint {
	key "One-Handed" 0
	key "Two-Handed" 1
}

enum pscriptaction : uint {
	key "Nothing" 0
	key "ScrMessage" 1
	key "PlaySchema%2FMotion" 2
	key "Alert" 3
	key "BeHostile" 4
	key "Investigate" 5
	key "GotoObject" 6
	key "FrobObject" 7
	key "Wait" 8
	key "MPrint" 9
	key "Add%2FRemoveMetaprop" 10
	key "AddLink" 11
	key "RemoveLink" 12
	key "Face" 13
	key "Signal" 14
	key "DestScrMessage" 15
}

enum psipowername : uint {
	key "Level 1" 0
	key "FeatherFall" 1
	key "StillHand" 2
	key "Pull" 3
	key "Quickness" 4
	key "Cyber" 5
	key "Cryokinesis" 6
	key "Codebreaker" 7
	key "Level 2" 8
	key "Stability" 9
	key "Berserk" 10
	key "RadShield" 11
	key "Healing" 12
	key "Might" 13
	key "Psi" 14
	key "Immolate" 15
	key "Level 3" 16
	key "Fabricate" 17
	key "Electro" 18
	key "AntiPsi" 19
	key "ToxinShield" 20
	key "Radar" 21
	key "Pyrokinesis" 22
	key "Terror" 23
	key "Level 4" 24
	key "Invisibility" 25
	key "Seeker" 26
	key "Dampen" 27
	key "Vitality" 28
	key "Alchemy" 29
	key "CyberHack" 30
	key "PsiSword" 31
	key "Level 5" 32
	key "MajorHeal" 33
	key "SomaDrain" 34
	key "Teleport" 35
	key "Enrage" 36
	key "ForceWall" 37
	key "PsiMines" 38
	key "PsiShield" 39
	key "None" 40
}

bitfield psipowerbits {
	key "Level 1" 0x0001
	key "FeatherFall" 0x0002
	key "StillHand" 0x0004
	key "Pull" 0x0008
	key "Quickness" 0x0010
	key "Cyber" 0x0020
	key "Cryokinesis" 0x0040
	key "Codebreaker" 0x0080
	key "Level 2" 0x0100
	key "Stability" 0x0200
	key "Berserk" 0x0400
	key "RadShield" 0x0800
	key "Healing" 0x1000
	key "Might" 0x2000
	key "Psi" 0x4000
	key "Immolate" 0x8000
	key "Level 3" 0x10000
	key "Fabricate" 0x20000
	key "Electro" 0x40000
	key "AntiPsi" 0x80000
	key "ToxinShield" 0x100000
	key "Radar" 0x200000
	key "Pyrokinesis" 0x400000
	key "Terror" 0x800000
	key "Level 4" 0x1000000
	key "Invisibility" 0x2000000
	key "Seeker" 0x4000000
	key "Dampen" 0x8000000
	key "Vitality" 0x10000000
	key "Alchemy" 0x20000000
	key "CyberHack" 0x40000000
	key "PsiSword" 0x80000000
}

bitfield psipowerbits2 {
	key "Level 5" 0x01
	key "MajorHeal" 0x02
	key "SomaDrain" 0x04
	key "Teleport" 0x08
	key "Enrage" 0x10
	key "ForceWall" 0x20
	key "PsiMines" 0x40
	key "PsiShield" 0x80
}

enum psipowertype : uint {
	key "Shot" 0
	key "Shield" 1
	key "One-Shot" 2
	key "Sustained" 3
	key "Cursor Target" 4
}

enum psiradartype : uint {
	key "None" 0
	key "Enemy" 1
	key "PowerUp" 2
}

bitfield researchreports {
	key "Once Grunt Organ" 0x0001
	key "Spore Organ" 0x0002
	key "Midwife Organ" 0x0004
	key "Grub Organ" 0x0008
	key "Anti-Annelid Toxin" 0x0010
	key "Worm Blood" 0x0020
	key "Crystal Shard" 0x0040
	key "Intelligence Hypo" 0x0080
	key "Swarm Organ" 0x0100
	key "Rumbler Organ" 0x0200
	key "Worm Mind" 0x0400
	key "Molecular Crazy Glue" 0x0800
	key "Arachnid Organ" 0x1000
	key "Minor Overlord Organ" 0x2000
	key "Worm Blend" 0x4000
	key "Viral Proliferator" 0x8000
	key "Worm Skin" 0x10000
	key "Worm Collector" 0x20000
	key "Greater Overlord Organ" 0x40000
	key "Worm Heart" 0x80000
	key "Annelid Launcher" 0x100000
	key "Monkey Brain" 0x200000
	key "Healing Gland" 0x400000
	key "Psi Organ" 0x800000
}

enum schemaaudioclass : uint {
	key "None" 0
	key "Noise" 1
	key "Speech" 2
	key "Ambient" 3
	key "Music" 4
	key "MetaUI" 5
	key "Player Feet" 6
	key "Other Feet" 7
	key "Collisions" 8
	key "Weapons" 9
	key "Monsters" 10
}

bitfield schemaloopflags {
	key "Poly" 0x001
	key "Auto-Halt" 0x002
}

bitfield schemaplayflags {
	key "Retrigger" 0x001
	key "Pan Position" 0x002
	key "Pan Range" 0x004
	key "No Repeat" 0x008
	key "No Cache" 0x010
	key "Stream" 0x020
	key "Play Once" 0x040
	key "No Combat" 0x080
	key "Net Ambient" 0x100
	key "Local Spatial" 0x200
}

enum servicetype : uint {
	key "Marines" 0
	key "Navy" 1
	key "OSA" 2
}

enum shockweapontype : uint {
	key "Conventional" 0
	key "Energy" 1
	key "Heavy" 2
	key "Annelid" 3
	key "Psi Amp" 4
}

enum slayresulttype : uint {
	key "Normal" 0
	key "Nothing" 1
	key "Terminate" 2
	key "Destroy" 3
}

enum softwaretype : uint {
	key "PDA" 0
	key "Hack" 1
	key "Modify" 2
	key "Repair" 3
	key "Research" 4
}

bitfield spawnflags {
	key "PopLimit" 0x01
	key "PlayerDistant" 0x02
	key "GotoLocation" 0x04
	key "SelfMarker" 0x08
	key "Raycast" 0x10
	key "Farthest" 0x20
}

enum swordactiontype : uint {
	key "Swing" 0
	key "Block" 1
	key "Block Directed" 2
}

bitfield targettype {
	key "Type 1" 0x01
	key "Type 2" 0x02
	key "Type 3" 0x04
	key "Type 4" 0x08
	key "Type 5" 0x10
}

enum traittype : int {
	key "None" 0
	key "Strong Metabolism" 1
	key "Pharmo-Friendly" 2
	key "Pack-rat" 3
	key "Speedy" 4
	key "Sharpshooter" 5
	key "Naturally Able" 6
	key "Cyber. Enhanced" 7
	key "Tank" 8
	key "Lethal Weapon" 9
	key "Security Exp." 10
	key "Smasher" 11
	key "Cyber-assimilation" 12
	key "Replicator Exp." 13
	key "Power Psi" 14
	key "Tinker" 15
	key "Spatially Aware" 16
}

bitfield tripwireflags {
	key "Enter" 0x01
	key "Exit" 0x02
	key "Mono" 0x04
	key "Once" 0x08
	key "Invert" 0x10
	key "Player" 0x20
	key "Alarm" 0x40
	key "Shove" 0x80
	key "ZapInside" 0x100
	key "EasterEgg" 0x200
}

bitfield tweqanimflags {
	key "NoLimit" 0x01
	key "Sim" 0x02
	key "Wrap" 0x04
	key "OneBounce" 0x08
	key "SimSmallRadius" 0x10
	key "SimLargeRadius" 0x20
	key "Offscreen" 0x40
}

bitfield tweqcurveflags {
	key "JitterLow" 0x01
	key "JitterHigh" 0x02
	key "JitterMul" 0x04
}

enum tweqhaltcfg : uint {
	key "DestroyObj" 0
	key "RemoveProp" 1
	key "StopTweq" 2
	key "Continue" 3
	key "SlayObj" 4
}

bitfield tweqmiscflags {
	key "Anchor" 0x001
	key "Scripts" 0x002
	key "Random" 0x004
	key "Gravity" 0x008
	key "ZeroVelocity" 0x010
	key "TellAI" 0x020
	key "PushOut" 0x040
	key "NegativeLogic" 0x080
	key "RelativeVelocity" 0x100
	key "NoPhysics" 0x200
	key "AnchorVHot" 0x400
	key "HostOnly" 0x800
}

bitfield tweqstateflags {
	key "On" 0x01
	key "Reverse" 0x02
	key "ReSynch" 0x04
	key "GoEdge" 0x08
	key "LapOne" 0x10
}

bitfield tweqnullflags {
	key "Null" 0x01
}



struct int-vector {
	int32 x
	int32 y
	int32 z
}


struct short-vector {
	int16 x
	int16 y
	int16 z
}

struct color {
	float r
	float g
	float b
}


struct pseudoscript {
	uint32 use pscriptaction action
	char [64] args [4]
}


struct aiaptitude {
	uint32 use airating rating = "3"
}


struct cfgtweqsimple {
	uint8 unknown
	uint8 use tweqcurveflags curve
	uint8 use tweqanimflags anim
	uint8 use tweqhaltcfg halt
	uint16 use tweqmiscflags misc
	uint16 rate
}


struct sttweqsimple {
	uint16 use tweqstateflags anim
	uint16 use tweqnullflags misc
	uint16 time
	uint16 frame
}


struct statsdesc {
	int32 strength
	int32 endurance
	int32 psi
	int32 agility
	int32 cyber
}

struct AI_WtchPn {
	int32 unknown1 [15]
	uint32 trigger
	uint32 use alertlevel awareness
	uint32 use aiwatchvisibility visibility
	int32 unknown2
	uint32 use aiwatchkillcondition killcondition
	bool32 killlikelinks
	bool32 onceonly
	int32 reusetime
	int32 resettime
	uint32 use alertlevel minalertness
	uint32 use alertlevel maxalertness
	uint32 use aipriority priority
	int32 radius
	int32 height
	alias pseudoscript step [7]
	alias pseudoscript extra
}

namespace properties {
	
	// Label: Acoustics
	struct Acoustics {
		uint32 use eaxtype eax
		int32 dampening
		int32 height
	}

	
	// Label: AI
	struct AI {
		char [32] behaviorset
	}

	alias aiaptitude AI_Aggres
	
	// Label: AIAlertCap
	struct AI_AlertC {
		uint32 use alertlevel maxlevel = "3"
		uint32 use alertlevel minlevel
		uint32 use alertlevel minrelax
	}

	
	// Label: AIAlertness
	struct AI_Alertn {
		uint32 use alertlevel level
		uint32 use alertlevel peak
	}

	
	// Label: AIAlertResponse
	struct AI_AlrtRs {
		uint32 use alertlevel level
		uint32 use aipriority priority
		int32 unknown [4]
		alias pseudoscript step [6]
		alias pseudoscript extra [2]
	}

	
	// Label: AIAlertSenseMultiplier
	struct AI_AlSnMu {
		
		struct level [4] {
			float hangle
			float vangle
			float range
			float knowledge
		}

		float combat
	}

	alias aiaptitude AI_Aptitu
	
	// Label: AIAwarenessCapacitor
	struct AI_AwareC {
		float discharge [3]
		int32 unknown
	}

	
	// Label: AIAwarenessDelay
	struct AI_AwrDel {
		int32 time_to_two
		int32 time_to_three
		int32 retrigger_two
		int32 retrigger_three
		int32 ignore_range
	}

	
	// Label: AIBroadcastSettings
	struct AI_BcstSe {
		bool32 disable
		
		struct state [8] {
			uint32 use broadcastschema schema
			uint32 use broadcasttype type
			char [16] custom
			char [64] tags
		}

	}

	
	// Label: AIBlocksVision
	struct AI_BlkVis {
		bool32 blockvision
	}

	
	// Label: AIBodyResponse
	struct AI_BodyRs {
		uint32 use aipriority priority
		int32 unknown [4]
		alias pseudoscript step [6]
		alias pseudoscript extra [2]
	}

	
	// Label: AICamera
	struct AI_Camera {
		float minangle
		float maxangle
		float scanspeed
	}

	
	// Label: AICombatResponse
	struct AI_CbtRsp {
		uint32 use aipriority priority
		int32 unknown [4]
		alias pseudoscript step [6]
		alias pseudoscript extra [2]
	}

	
	// Label: AICombatTiming
	struct AI_CbtTim {
		int32 createtime
		int32 droptime
		int32 mindelay
		int32 maxdelay
	}

	
	// Helper: AI Conversation step
	struct AI_Conver_step {
		int32 use convactor actor = "-1"
		bool32 noblock
		alias pseudoscript action
	}
	
	// Label: AIConversation
	struct AI_Conver {
		int32 unknown1 [4]
		uint32 use alertlevel abort_level
		uint32 use aipriority abort_priority
		int32 unknown2 [3]
		
		alias AI_Conver_step step [6]
		alias AI_Conver_step extra [66]
	}

	alias aiaptitude AI_Defens
	
	// Label: AICoverPoint
	struct AICoverPt {
		int32 value
		float decayspeed
		bool32 canduck
	}

	
	// Label: AIDevice
	struct AI_Device {
		int32 joint
		float inactive
		float active
		float speed
		int32 rotation_joint
		float facing
	}

	alias aiaptitude AI_Dodgin

	// Helper: Efficiency record
	struct AIEfficiency_record {
		float entry
		float entry_height
		float exit
		float exit_height
	}
	
	// Label: AIEfficiency
	struct AI_Effici {
		bool32 enabled

		alias AIEfficiency_record normal
		alias AIEfficiency_record super
	}

	
	// Label: AIFidget
	struct AI_Fidget {
		bool32 fidget
	}

	
	// Label: AIFleeCondition
	struct AI_FleeCo {
		uint32 use aifleecondition condition
		int32 hp_percent
		int32 friends
	}

	
	// Label: AIFleePoint
	struct AI_FleePo {
		int32 value
	}

	
	// Label: AIFreeSenseKnowledge
	struct AI_FreeKn {
		int32 value
	}

	
	// Label: AIFrozen
	struct AI_Frozen {
		int32 start
		int32 duration
	}

	
	// Label: AIGrubCombat
	struct AI_Grub_C {
		float leapdistance
		float bitedistance
		char [32] stimulus
		float intensity
		float horizontalspeed
		float verticalspeed
		float minleaptime
		float maxleaptime
	}

	
	// Label: AIGun
	struct AIGun {
		char [16] name
	}

	
	// Label: AIGunDescription
	struct AIGunDesc {
		float maxrange
		vector fireoffset
		int32 startlag
		int32 burstlag
		int32 endlag
		int16 aimerror
	}

	alias aiaptitude AI_Hearin
	
	// Label: AIIdleDirections
	struct AI_IdleDi {
		int32 mintime
		int32 maxtime
		
		struct direction [4] {
			int32 facing
			int32 weight
		}

	}

	
	// Label: AIIdleOrigin
	struct AI_IdleOr {
		vector position
		float facing
	}

	
	// Label: AIIdleReturnToOrigin
	struct AI_IdlRet {
		bool32 returnorigin
	}

	
	// Label: AIInformDelay
	struct AI_InfDly {
		int32 delay
	}

	
	// Label: AIInformDistance
	struct AI_InfDst {
		int32 distance
	}

	
	// Label: AIInformExpiration
	struct AI_InfExp {
		int32 time
	}

	
	// Label: AIInformMaxPasses
	struct AI_InfMxP {
		int32 passes
	}

	
	// Label: AIInformOthers
	struct AI_InfOtr {
		bool32 inform
	}

	
	// Label: AIInformResponse
	struct AI_InfRsp {
		bool32 disable
		bool32 nodefault
		int32 unknown [5]
		alias pseudoscript step [2]
		alias pseudoscript extra [6]
	}

	
	// Label: AIInvestigationKind
	struct AI_InvKnd {
		uint32 use investigatekind type
	}

	
	// Label: AIIsProxy
	struct AI_IsProx {
		bool32 isproxy
	}

	
	// Label: AILaunchVisible
	struct AI_Launch {
		bool32 isvisible
	}

	
	// Label: AIMode
	struct AI_Mode {
		uint32 use aimode mode
	}

	varstr AI_MotTag
	
	// Label: AIMoveSpeed
	struct AI_MoveSp {
		float speed
	}

	
	// Label: AIMoveZOffset
	struct AI_MoveZO {
		float height
	}

	
	// Label: AINonCombatDamageResponse
	struct AI_NCDmgR {
		int32 woundthreshold
		int32 severethreshold
		int32 responsechance
	}

	
	// Label: AINonCombatRespondToDamage
	struct AI_NCDmRs {
		bool32 respond
	}

	
	// Label: AINoGhost
	struct AI_NoGhos {
		bool32 noghost
	}

	
	// Label: AINoHandoff
	struct AI_NoHand {
		bool32 nohandoff
	}

	
	// Label: AINonHostile
	struct AI_NonHst {
		uint32 use ainonhostile condition
	}

	
	// Label: AINoticeDamage
	struct AI_Notice {
		bool32 value
	}

	
	// Label: AINotMeleeTarget
	struct AI_NotMelee {
		bool32 value
	}

	
	// Label: AINoticeBodies
	struct AI_NtcBod {
		bool32 value
	}

	
	// Label: AIObjectAvoid
	struct AI_ObjAvo {
		int32 zero
		uint32 use aiobjectavoidflags flags
	}

	
	// Label: AIObjectPathable
	struct AI_ObjPat {
		bool32 value
	}

	
	// Label: AIOnlyNoticePlayer
	struct AI_OnlyPl {
		bool32 value
	}

	
	// Label: AIPatrol
	struct AI_Patrol {
		bool32 value
	}

	
	// Label: AIPatrolRandom
	struct AI_PtrlRn {
		bool32 value
	}

	
	// Label: AIRangedCombatParams
	struct AIRCProp {
		int32 mindistance
		int32 idealdistance
		float firingdelay
		uint32 use aircpriority coverdesire = "2"
		float decayspeed
		uint32 use aircfrequency firewhilemoving = "3"
		bool32 containprojectile
	}

	
	// Label: AIRangedCombatRanges
	struct AIRCRange {
		float mindistance
		float shortdistance
		float longdistance
		float maxdistance
	}

	
	// Label: AIRangedCombatWoundSound
	struct AIRCWndSn {
		int32 woundthreshold
		int32 severethreshold
		int32 responsechance
	}

	
	// Label: AIRangedCombatWoundMotion
	struct AIRCWound {
		int32 woundthreshold
		int32 severethreshold
		int32 responsechance
	}

	
	// Label: AIRangedApplicabilities
	struct AI_RngApp {
		uint32 use aircapplicable idle = "4"
		uint32 use aircapplicable zero1 = "0"
		uint32 use aircapplicable close = "4"
		uint32 use aircapplicable backup = "4"
		uint32 use aircapplicable wound = "4"
		uint32 use aircapplicable vantage = "4"
		uint32 use aircapplicable left = "4"
		uint32 use aircapplicable right = "4"
		uint32 use aircapplicable zero2 = "0"
	}

	
	// Label: AIRangedFleeParams
	struct AI_RngFle {
		uint32 use aircapplicable veryshortpriority
		uint32 use aircapplicable shortpriority = "4"
		float anglerange
		int32 numpoints
		float distance
		float clearance
	}

	
	// Label: AIRangedShootParams
	struct AI_RngSho {
		uint32 use aircapplicable veryshortpriority = "4"
		uint32 use aircapplicable shortpriority = "4"
		uint32 use aircapplicable idealpriority = "4"
		uint32 use aircapplicable longpriority = "4"
		uint32 use aircapplicable verylongpriority = "4"
		bool32 confirmrange
		bool32 confirmlof
		int32 rotationspeed
		vector launchoffset
	}

	
	// Label: AISaveConversation
	struct AI_SaveCo {
		bool32 value
	}

	
	// Label: AISeesProjectiles
	struct AI_SeesPr {
		bool32 value
	}

	
	// Label: AISignalResponse
	struct AI_SigRsp {
		char [32] signal
		uint32 use aipriority priority
		int32 unknown [4]
		alias pseudoscript step [6]
		alias pseudoscript extra [2]
	}

	alias aiaptitude AI_Sloth
	varstr AI_SndTag
	
	// Label: AISoundType
	struct AI_SndTyp {
		uint32 use aisoundtype type
		char [32] signal
		int32 zero
	}

	varstr AI_StandT
	
	// Label: AISurprise
	struct AISuprise {
		float zero
		float one
		float radius
	}

	
	// Label: AISwarm
	struct AI_Swarm {
		float closedistance
		float backoffdistance
	}

	
	// Label: AITeam
	struct AI_Team {
		uint32 use aiteam team
	}

	
	// Label: AIThreatResponse
	struct AI_ThrtRs {
		uint32 use aithreat threat
		uint32 use aipriority priority
		int32 unknown [4]
		alias pseudoscript step [6]
		alias pseudoscript extra [2]
	}

	
	// Label: AITurnRate
	struct AI_TurnRa {
		float speed
	}

	
	// Label: AITurret
	struct AI_Turret {
		float fireepsilon
		int32 firepause
		float pitchepsilon
		float range
	}

	
	// Label: AIUsesDoors
	struct AI_UsesDo {
		bool32 value
	}

	
	// Label: AIVantagePoint
	struct AIVantage {
		int32 value
		float decayspeed
	}

	alias aiaptitude AI_Verbos
	
	// Label: AIVisibilityControl
	struct AI_VisCtr {
		int32 lowlight
		int32 midlight
		int32 highlight
		float slow
		float fast
		int32 slowmod
		int32 normalmod
		int32 fastmod
		float walldist
		int32 crouchmod
		int32 wallmod
		float cornerleanmod
	}

	
	// Label: AIVisionDescription
	struct AI_VisDes {
		int32 unknown [8]
		
		struct viscone [10] {
			uint32 use aivisionflags flags
			int32 angle
			int32 zangle
			int32 range
			int32 acuity
		}

		float zoffset
	}

	
	// Label: AIVisibility
	struct AI_Visibi {
		int32 level
		int32 light
		int32 movement
		int32 exposure
		int32 lastupdate
	}

	alias aiaptitude AI_Vision
	
	// Label: AIVisionJoint
	struct AI_VisJoi {
		uint32 use meshjoint joint
	}

	
	// Label: AIVisibilityModifier
	struct AI_VisMod {
		float type0
		float type1
		float type2
		float type3
		float type4
		float type5
	}

	
	// Label: AIVisionType
	struct AI_VisTyp {
		uint32 use aivisiontype type
	}

	
	// Label: AIWander
	struct AI_Wander {
		float distance
	}

	
	// Label: AIWatchPoint
	alias AI_WtchPn AI_WtchPn
	
	// Label: AirSupply
	struct AirSupply {
		int32 value
	}

	
	// Label: Alarm
	struct Alarm {
		bool32 active
	}

	
	// Label: Alchemy
	struct Alchemy {
		float value
	}

	
	// Label: AmbientRoom
	struct Ambient {
		char [64] name
		int32 volume
	}

	
	// Label: AmbientSound
	struct AmbientHa {
		int32 radius
		int32 volume
		uint32 use ambienthackedflags flags
		char [16] schema
		char [16] aux [2]
	}

	
	// Label: AIAngleLimits
	struct AngleLimi {
		float start
		float end
	}

	
	// Label: AnimLight
	struct AnimLight {
		int32 unk1
		vector offset
		int32 unk2 = "1"
		int16 cellindex
		int16 hitcells
		int16 lightnum = "-1"
		uint16 use animlightmode mode = "4"
		int32 brightentime
		int32 dimtime
		float minbrightness
		float maxbrightness
		int32 unk4
		bool32 rising
		int32 countdown
		bool32 inactive
		float radius
		int32 unk5
	}

	// Helper record: gunanim 
	struct GunAnim_record {
		float target
		float rate
	}
	
	struct GunAnim {
		uint32 use meshjoint joint
		uint32 use gunanimflags flags
		
		alias GunAnim_record primary
		alias GunAnim_record secondary
	}

	alias GunAnim AnimPre
	alias GunAnim AnimPost
	
	// Label: AnimTexture
	struct AnimTex {
		int32 speed
		uint32 use animtextureflags flags
	}

	
	// Label: Apparition
	struct ApparID {
		char [16] name
	}

	
	// Label: Armor
	struct Armor {
		float toxic
		float radiation
		float combat
	}

	alias statsdesc ArmrStats
	
	// Label: ARSourceScale
	struct arSrcScal {
		float scale
	}

	
	// Label: AudioLog
	struct AudioLog {
		char [16] name
	}

	
	// Label: AutoPickup
	struct AutoPicku {
		bool32 value
	}

	
	// Label: AutoMultibrush
	struct AutoVBR {
		char [16] vbrname
	}

	
	// Label: AvatarZOffset
	struct AvatarZOf {
		float height
	}

	
	// Label: BaseGunDescription
	struct BaseGunDe {
		
		struct setting [3] {
			int32 burst
			int32 clip
			int32 spray
			float stimmult
			int32 bursttime
			int32 shottime
			int32 ammousage
			float speedmult
			int32 reloadtime
			int32 zero
		}

	}

	alias statsdesc BaseStats
	
	// Label: TechSkills
	struct BaseTechD {
		int32 hack
		int32 repair
		int32 modify
		int32 maintain
		int32 research
	}

	
	// Label: WeaponSkills
	struct BaseWeapo {
		int32 conventional
		int32 energy
		int32 heavy
		int32 annelid
	}

	
	// Label: BaseWeaponDamage
	struct BaseWpnDm {
		int32 damage
	}

	
	// Label: BashFactor
	struct BashFacto {
		float value
	}

	
	// Label: BashParams
	struct BashParam {
		float threshold
		float coefficient
	}

	
	// Label: BitmapAnimation
	struct BitmapAni {
		uint32 use bitmapanimationflags flags
	}

	
	// Label: BlockFrob
	struct BlockFrob {
		bool32 blocks
	}

	
	// Label: BloodCause
	struct BloodCaus {
		bool32 causeblood
	}

	
	// Label: BloodMaxDamage
	struct BloodMaxD {
		int32 damage
	}

	varstr BloodType
	
	// Label: BookData
	struct BookData {
		char [16] book
	}

	
	// Label: Borrowed
	struct Borrowed {
		bool32 borrowed
	}

	
	// Label: Borrowing
	struct Borrowing {
		bool32 borrowing
	}

	
	// Label: BreathConfig
	struct BreathCon {
		int32 maxair
		int32 drownfreq
		int32 drowndamage
		float recoverrate
	}

	
	// Label: BumpMap
	struct BumpMap {
		bool32 isbumpmap
	}

	
	// Label: CameraAttach
	struct CameraObj {
		vector offset
		alias short-vector facing
		int16 zero
		bool32 lockxaxis
		bool32 lockyaxis
		bool32 lockzaxis
		bool32 isvisible
	}

	
	// Label: CanAttach
	struct CanAttach {
		bool32 value
	}

	
	// Label: GunCannister
	struct Cannister {
		int32 count
		float speed
		int32 generations
	}

	alias cfgtweqsimple CfgTweqBl
	alias cfgtweqsimple CfgTweqDe
	
	// Label: TweqEmitterConfig
	struct CfgTweqEm {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 rate
		int32 maxframes
		char [16] objectname
		vector velocity
		vector anglerandom
	}

	alias CfgTweqEm CfgTweq2E
	alias CfgTweqEm CfgTweq3E
	alias CfgTweqEm CfgTweq4E
	alias CfgTweqEm CfgTweq5E
	
	// Label: TweqJointsConfig
	struct CfgTweqJo {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 zero
		
		struct joint [6] {
			uint8 unk1
			uint8 use tweqcurveflags curve
			uint8 use tweqanimflags anim
			uint8 zero [5]
			float rate
			float low
			float high
		}

		int8 primary
		uint8 unused [3]
	}

	
	// Label: TweqLockConfig
	struct CfgTweqLo {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 zero
		int32 zero2 [2]
		float rate
		float low
		float high
		int8 joint
		uint8 zero3 [3]
	}

	
	// Label: TweqModelsConfig
	struct CfgTweqMo {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 rate
		char [16] modelname [6]
	}

	// Helper: Tweq Axis
	struct TweqConfig_Axis {
		float rate
		float low
		float high
	}
	
	// Label: TweqRotateConfig
	struct CfgTweqRo {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 zero
		
		alias TweqConfig_Axis x
		alias TweqConfig_Axis y
		alias TweqConfig_Axis z
	
		int32 use physaxistype primary
	}

	
	// Label: TweqScaleConfig
	struct CfgTweqSc {
		uint8 unknown
		uint8 use tweqcurveflags curve
		uint8 use tweqanimflags anim
		uint8 use tweqhaltcfg halt
		uint16 use tweqmiscflags misc
		uint16 zero
		
		alias TweqConfig_Axis x
		alias TweqConfig_Axis y
		alias TweqConfig_Axis z
		
		int32 use physaxistype primary
	}

	
	// Label: CharGenRoom
	struct CharGenRo {
		int32 room
	}

	
	// Label: CharGenYear
	struct CharGenYe {
		int32 year
	}

	
	// Label: ChemicalsNeeded
	struct ChemNeede {
		char [64] item [7]
		int32 time [7]
	}

	
	// Label: ClassTags
	struct ClassTag {
		uint32 value
		char [252] tags
	}

	
	// Label: Climbability
	struct Climbabil {
		float factor
	}

	
	// Label: CollisionType
	struct Collision {
		uint32 use physcollisionresult flags
	}

	
	// Label: CombineType
	struct CombineTy {
		char [16] label
	}

	varstr ConsumeTy
	
	// Label: ContainerDimensions
	struct ContainDi {
		int32 width
		int32 height
	}

	
	// Label: CreatureType
	struct Creature {
		uint32 use creaturetype type
	}

	
	// Label: CreaturePose
	struct CretPose {
		uint32 use cretposetype type
		char [80] name
		float fraction
		float scale
		bool32 isballistic
	}

	
	// Label: CollisionSoundArrow
	struct CSArrow {
		char [16] label
	}

	
	// Label: CollisionSoundProjectile
	struct CSProject {
		char [16] label
	}

	
	// Label: CollisionSoundProperty
	struct CSPropert {
		char [16] label
	}

	
	// Label: Culpable
	struct Culpable {
		bool32 isculpable
	}

	
	// Label: CurrentWeaponDamage
	struct CurWpnDmg {
		int32 damage
	}

	
	// Label: DeathStage
	struct DeathStag {
		int32 value
	}

	
	// Label: DelayTime
	struct DelayTime {
		float time
	}

	
	// Label: MultiLevelMission
	struct DestLevel {
		char [16] name
	}

	
	// Label: MultiLevelLocation
	struct DestLoc {
		int32 dest
	}

	
	// Label: DiffPermit
	struct DiffPermi {
		uint32 use difficultylevels levels
	}

	alias DiffPermi DiffClose
	alias DiffPermi DiffDestr
	alias DiffPermi DiffLock
	alias DiffPermi DiffScript
	alias DiffPermi DiffTurnO
	
	// Label: DistinctAvatar
	struct DistinctA {
		bool32 value
	}

	
	// Label: DonorType
	struct DonorType {
		int32 value
	}

	
	// Label: DoorOpenSound
	struct DoorOpenS {
		char [16] schema
	}

	
	// Label: DoorCloseSound
	struct DoorClose {
		char [16] schema
	}

	
	// Label: DoorTimer
	struct DoorTimer {
		int32 time
	}

	
	// Label: DrainAmount
	struct DrainAmt {
		float amount
	}

	
	// Label: DrainRate
	struct DrainRate {
		float rate
	}

	alias statsdesc DrugStats
	
	// Label: Ecology
	struct Ecology {
		float time
		int32 minvalue [3]
		int32 maxvalue [3]
		int32 recovery [3]
		int32 randomize [3]
	}

	
	// Label: EcologyState
	struct EcoState {
		int32 mode
	}

	
	// Label: EcologyType
	struct EcoType {
		int32 type
	}

	
	// Label: Elasticity
	struct Elasticit {
		float elasticity
	}

	
	// Label: HasElevator
	struct ElevAble {
		bool32 value
	}

	
	// Label: ElevatorOffset
	struct ElevOffse {
		float x
		float y
		float z
	}

	
	// Label: Energy
	struct Energy {
		float value
	}

	
	// Label: ExpCookies
	struct ExP {
		int32 value
	}

	
	// Label: ExtraLight
	struct ExtraLigh {
		float factor
		bool32 isadditive
	}

	
	// Label: FabricateCost
	struct FabCost {
		int32 cost
	}

	
	// Label: FabricateQuantity
	struct Fabricate {
		int32 quantity
	}

	
	// Label: FailureSound
	struct FailSound {
		char [16] label
	}

	
	// Label: Firer
	struct Firer {
		int32 objectid
	}

	
	// Label: FlowColorIndex
	struct FlowColor {
		int32 index
	}

	
	// Label: FlowGroup
	struct FlowGroup {
		int32 group
	}

	
	// Label: FrameAnimationConfig
	struct FrameAniC {
		float fps
		bool8 oneshot
		bool8 bounce
		bool8 limit
		bool8 killfinish
	}

	
	// Label: FrameAnimationState
	struct FrameAniS {
		int32 unknown1
		int32 unknown2
		int32 current
		int32 unknown3
	}

	
	// Label: Friction
	struct Friction {
		float friction
	}

	
	// Label: FrobHandler
	struct FrobHandl {
		uint32 use networkhandler type
	}

	
	// Label: FrobInfo
	struct FrobInfo {
		uint32 use frobaction world
		uint32 use frobaction inventory
		uint32 use frobaction tool
		uint32 zero
	}

	
	// Label: FrobSound
	struct FrobSound {
		char [16] label
	}

	
	// Label: FromBriefcase
	struct FromBrief {
		bool32 value
	}

	
	// Label: BorgLoot
	struct GuarLoot {
		char [16] label
	}

	
	// Label: GunKickback
	struct GunKick {
		
		struct setting [3] {
			float preshot
			uint16 kickpitch
			uint16 kickpitchmax
			uint16 kickheading
			uint16 kickreturnangle
			float kickback
			float kickbackmax
			float kickreturn
			uint16 joltpitch
			uint16 joltheading
			float joltback
		}

	}

	
	// Label: GunReliability
	struct GunReliab {
		float minbreakage
		float maxbreakage
		float degraderate
		float breakthreshold
	}

	
	// Label: GunState
	struct GunState {
		int32 ammo
		float condition
		int32 setting
		int32 mods
	}

	
	// Label: HackDifficulty
	struct HackDiff {
		int32 successchance
		int32 criticalchance
		float cost
	}

	
	// Label: HackKey
	struct HackKey {
		int32 value
	}

	
	// Label: HackLock
	struct HackLock {
		int32 value
	}

	varstr HackText
	
	// Label: HackDuration
	struct HackTime {
		int32 time
	}

	
	// Label: HackVisibility
	struct HackVisi {
		float visibility
	}

	
	// Label: HandoffNumber
	struct HandoffNu {
		int32 value
	}

	
	// Label: HasBrush
	struct HasBrush {
		bool32 hasbrush
	}

	
	// Label: HasRefs
	struct HasRefs {
		bool32 hasrefs
	}

	
	// Label: Heartbeat
	struct Heartbeat {
		int32 time
	}

	
	// Label: HeatDisks
	struct HeatDisks {
		vector start
		vector end
		float startradius
		float endradius
		float bottomjitter
		float topjitter
		float height
		int32 blobs
		int32 maxdisks
	}

	
	// Label: HelpText
	struct HelpText {
		uint32 texts
	}

	
	// Label: HitPoints
	struct HitPoints {
		int32 hp
	}

	
	// Label: HomingProjectile
	struct Homing {
		uint32 use targettype targettype
		float distancefilter
		float headingfilter
		int32 maxturn
		int32 updatetime
	}

	
	// Label: HtHAudioResponse
	struct HTHAudioR {
		float low
		float high
		float speed
	}

	
	// Label: HtHCombatDistances
	struct HTHCombat {
		float low
		float mid
		float high
	}

	
	// Label: HtHGruntAlways
	struct HTHGruntA {
		bool32 gruntalways
	}

	
	// Label: HtHModeOverride
	struct HTHModeOv {
		int32 value
	}

	
	// Label: HtHMotionResponse
	struct HTHMotion {
		float low
		float high
		float speed
	}

	
	// Label: HUDSelectable
	struct HUDSelect {
		bool32 canselect
	}

	
	// Label: HUDDuration
	struct HUDTime {
		int32 time
	}

	varstr HUDUse
	
	// Label: Immobile
	struct Immobile {
		bool32 isimmobile
	}

	
	// Label: ImplantType
	struct ImplantDe {
		int32 type
	}

	alias statsdesc ImplStats
	alias BaseTechD ImplTechD
	
	// Label: ScriptInitted
	struct Initted {
		bool32 value
	}

	varstr InvCursor
	alias ContainDi InvDims
	
	// Label: InventoryLimbModel
	struct InvLimbMo {
		char [16] name
	}

	
	// Label: InventoryRenderType
	struct InvRendTy {
		uint32 use inventoryrendertype type
		char [16] name
	}

	
	// Label: JointPositions
	struct JointPos {
		float position [6]
	}

	
	// Label: KeyDest
	struct KeyDst {
		bool8 master
		uint32 use deckregions regions
		uint8 lockid
	}

	alias KeyDst KeySrc
	
	// Label: KeypadCode
	struct KeypadCod {
		int32 code
	}

	
	// Label: LauncherMass
	struct LauncherM {
		float mass
	}

	
	// Label: Light
	struct Light {
		float brightness
		vector offset
		float radius
	}

	
	// Label: LightColor
	struct LightColo {
		float hue
		float saturation
	}

	
	// Label: LocalCopy
	struct LocalCopy {
		bool32 islocal
	}

	
	// Label: LockCount (?)
	struct LockCnt {
		int32 value
	}

	
	// Label: Locked
	struct Locked {
		bool32 islocked
	}

	varstr LockMsg
	
	// Label: LogsDeck1
	struct Logs1 {
		uint32 emails
		uint32 logs
		uint32 notes
		uint32 Videos
	}

	alias Logs1 Logs2
	alias Logs1 Logs3
	alias Logs1 Logs4
	alias Logs1 Logs5
	alias Logs1 Logs6
	alias Logs1 Logs7
	alias Logs1 Logs8
	alias Logs1 Logs9
	
	// Label: Loot
	struct LootInfo {
		int32 picks
		char [64] item [6]
		int32 rarity [6]
		int32 extra [6]
	}

	
	// Label: MapLocation
	struct MapLoc {
		int32 location
	}

	
	// Label: MapIcon
	struct MapObjIco {
		char [16] name
	}

	
	// Label: MapIconRotated
	struct MapObjRot {
		bool32 isrotated
	}

	
	// Label: MapRefInfo
	struct MapRef {
		int32 x
		int32 y
		int32 frame
	}

	varstr MapText
	alias ClassTag Material 
	
	// Label: MaxHitPoints
	struct MAX_HP {
		int32 hp
	}

	
	// Label: MaxSpeechPause
	struct MaxSpchPa {
		int32 time
	}

	
	// Label: MeleeImpactDestroy
	struct MelDesImp {
		int32 destroychance
	}

	
	// Label: MeleeType
	struct MeleeTyp {
		uint32 use meleeweapon type
	}

	
	// Label: MeshAttach
	struct MeshAttac {
		uint32 custom
		uint32 accessory
		
		struct attachment [4] {
			int32 object
			uint32 use meshjoint joint
			alias short-vector angle
			uint16 zero [4]
			vector offset [4]
		}

	}

	varstr MetapropT
	
	// Label: MiniGames
	struct MiniGames {
		uint32 use minigamename games
	}

	
	// Label: MinSpeechPause
	struct MinSpchPa {
		int32 time
	}

	
	// Label: ModelName
	struct ModelName {
		char [16] label
	}

	varstr Modify1
	varstr Modify2
	alias HackDiff ModifyDif
	alias HackDiff Modify2Di
	
	// Label: MotionActorTags
	struct MotActorT {
		char [800] tags
	}

	
	// Label: MotionGaitDescription
	struct MotGaitDe {
		int32 offsetleft
		int32 offsetright
		float ascend
		float descend
		float timewarp
		float stretch
		int32 anglevelocity
		int32 turntolerance
		float maxvelocity
		float minvelocity
		int32 numturns
		
		struct turn [3] {
			int32 angle
			int32 offset
		}

		float noise
	}

	
	// Label: MotorController
	struct MotorCont {
		uint32 use motorcontrollertype type
	}

	
	// Label: MotionPhysLimits
	struct MotPhysLi {
		int32 unknown1
		int32 unknown2
	}

	
	// Label: MotionPlayerLimbOffset
	struct MotPlyrLi {
		vector position
		vector angle
	}

	
	// Label: MovingTerrain
	struct MovingTer {
		bool32 active
		int32 unknown
	}

	
	// Label: MessageTime
	struct MsgTime {
		int32 time
	}

	
	// Label: ObjNameType
	struct NameType {
		uint32 use objectnametype type
	}

	
	// Label: NetworkCategory
	struct NetworkCa {
		uint32 use networkcategorytype type
	}

	
	// Label: NoBorrow
	struct NoBorrow {
		bool32 disallow
	}

	
	// Label: NonPhysicalCreature
	struct NonPhysCr {
		bool32 nophys
	}

	
	// Label: NotPullable
	struct NotPullab {
		bool32 nopull
	}

	
	// Label: ObjectBrokenIcon
	struct ObjBroken {
		char [16] label
	}

	
	// Label: ObjectIcon
	struct ObjIcon {
		char [16] label
	}

	varstr ObjList
	varstr ObjLookS
	varstr ObjName
	varstr ObjShort
	
	// Label: ObjectSound
	struct ObjSoundN {
		char [16] label
	}

	
	// Label: ObjectState
	struct ObjState {
		uint32 use objectstate state
	}

	varstr OTxtRepr0
	varstr OTxtRepr1
	varstr OTxtRepr2
	varstr OTxtRepr3
	
	// Label: Particle
	struct Particle {
		int32 value
	}

	
	// Label: ParticleGroup
	struct ParticleG {
		int32 unknown1 [10]
		uint32 use particlegrouptype type = "4"
		uint32 use particlegroupmotion motion = "4"
		uint32 use particlegroupanimation animation = "1"
		int32 unknown2 [2]
		int32 numparticles
		int32 unknown3 [6]
		vector velocity
		vector gravity
		uint8 colors [3]
		uint8 alpha
		bool8 simalways
		bool8 simgroup
		uint8 zero1
		bool8 sortparticles
		uint16 zero2
		bool8 ignorerefs
		uint8 zero3 [5]
		vector spinspeed
		int32 pulsecycle
		float pulsesize
		float radius
		bool8 startlaunched
		bool8 spinandpulse
		bool8 subpixelalpha
		bool8 subpixelskip
		uint8 zero4 [3]
		bool8 active
		int32 animtimeoffset
		float particlesize
		int32 unknown4 [5]
		float scalespeed
		int32 unknown5 [15]
		int32 launchtime
		char [16] bitmap
		int32 unknown6
		int32 fadetime
		int32 unknown7 [11]
	}

	
	// Label: ParticleGroupLaunchInfo
	struct PGLaunchI {
		uint32 use particlelaunchtype type
		vector boxmin
		vector boxmax
		vector velocitymin
		vector velocitymax
		float radiusmin
		float radiusmax
		float timemin
		float timemax
		bool32 worldvelocity
		bool32 worldlocation
		int32 unknown [16]
	}

	
	// Label: PhysAICollidesWith
	struct PhysAICol {
		bool32 collideswith
	}

	
	// Label: PhysicsModelAttributes
	struct PhysAttr {
		float gravity
		float mass
		float density
		float elasticity
		float friction
		vector cog
		uint32 use physaxisflags rotationaxes
		uint32 use physorientationflags restaxes
		uint32 use physorientationflags climbable
		bool32 edgetrigger
	}

	
	// Label: PhysicsModelControls
	struct PhysContr {
		uint32 use physcontrolflags flags
		vector translation
		vector velocity
		vector rotation
	}

	
	// Label: PhysicsModelDimensions
	struct PhysDims {
		float radius [2]
		vector offset [2]
		vector size
		bool32 pointterrain
		bool32 pointspecial
	}

	
	// Label: PhysProjectileExplosion
	struct PhysExplo {
		int32 magnitude
		float radius
	}

	
	// Label: PhysProjectileFacesVelocity
	struct PhysFaceV {
		bool32 facevelocity
	}

	
	// Label: PhysProjectileInitialVelocity
	struct PhysInitV {
		float x
		float y
		float z
	}

	
	// Label: PhysicsPressurePlate
	struct PhysPPlat {
		float weight
		float travel
		float speed
		float pause
		bool32 blockvision
		int32 zero [2]
	}

	
	// Label: PhysRope
	struct PhysRope {
		float length
		bool32 deployed
		float desiredlength
	}

	
	// Label: PhysicsModelState
	struct PhysState {
		vector location
		vector facing
		vector velocity
		vector rotvelocity
	}

	
	// Label: PhysicsModelType
	struct PhysType {
		uint32 use physmodeltype type = "0"
		int32 submodels = "6"
		bool32 removeonsleep
		bool32 special
	}

	
	// Label: PickBias
	struct PickBias {
		float value
	}

	
	// Label: PickDistance
	struct PickDist {
		float distance
	}

	
	// Label: PlayerGunDescription
	struct PlayerGun {
		uint32 use playergunflags flags
		char [16] hand
		char [16] icon
		vector modeloffset
		vector fireoffset
		uint16 modelheading
		uint16 reloadpitch
		int16 reloadrate
		uint32 use playerguntype type
	}

	varstr PlayerNam
	
	// Label: PlotCritical
	struct PlotCriti {
		bool32 iscritical
	}

	
	// Label: Position
	struct Position {
		vector position
		int16 cell = "-1"
		int16 zero = "-1"
		alias short-vector facing
	}

	
	// Label: Preload
	struct Preload {
		bool32 value
	}

	varstr PrjSound
	
	// Label: ProjectileDescription
	struct Projectil {
		int32 spray
		int16 spread
	}

	
	// Label: ProtocolDroidExplodeRange
	struct ProtocolE {
		float distance
	}

	
	// Label: ProxyStorage
	struct ProxyStor {
		int32 value
	}

	alias ClassTag PsiTags
	
	// Label: PsiOverloadState
	struct PsiOverDe {
		int32 value
	}

	alias PsiOverDe PsiOver2D
	
	// Label: PsiPowerDescription
	struct PsiPower {
		uint32 use psipowername power
		uint32 use psipowertype type
		int32 initialcost
		float data [4]
	}

	
	// Label: PsiPowers
	struct PsiPowerD {
		uint32 use psipowerbits powers
	}

	
	// Label: PsiPowers2
	struct PsiPower2 {
		uint32 use psipowerbits2 powers
	}

	
	// Label: PsiRadarType
	struct PsiRadar {
		uint32 use psiradartype type
	}

	
	// Label: PsiShield
	struct PsiShield {
		int32 basetime
		int32 addtime
		int32 basintensity
	}

	
	// Label: PsiState
	struct PsiState {
		uint32 use psipowername power
		int32 level
		int32 maxlevel
	}

	alias statsdesc PsiStatsD
	
	// Label: Puppet
	struct Puppet {
		int32 unknown1
		int32 object
		int32 zero
		int32 unknown2
	}

	varstr QBName
	
	// Label: QBValue
	struct QBVal {
		int32 value
	}

	
	// Label: RadAbsorb
	struct RadAbsorb {
		float amount
	}

	
	// Label: RadAmbient
	struct RadAmb {
		float level
	}

	
	// Label: RadDrain
	struct RadDrain {
		float level
	}

	
	// Label: RadLevel
	struct RadLevel {
		float level
	}

	
	// Label: RadRecoverRate
	struct RadRecove {
		float rate
	}

	
	// Label: RadLevel
	struct Recycle {
		int32 value
	}

	
	// Label: RenderAlpha
	struct RenderAlp {
		float alpha
	}

	
	// Label: RenderFlash
	struct RenderFla {
		
		// Label: Color
		struct color {
			uint8 red
			uint8 green
			uint8 blue
		}

		bool8 active
		int32 worldduration
		int32 screenduration
		int32 effectduration
		float overalltime
		float range
		uint32 startframe
	}

	
	// Label: RenderType
	struct RenderTyp {
		uint32 use objectrendertype mode
	}

	alias HackDiff RepairDif
	
	// Label: RepContents
	struct RepConten {
		char [64] name [6]
		int32 cost [6]
	}

	alias RepConten RepHacked
	alias statsdesc ReqStatsD
	alias BaseTechD ReqTechDe
	
	// Label: GuaranteeLoot
	struct RGuarLoot {
		char [16] label
	}

	
	// Label: RoomGravity
	struct RoomGrav {
		int32 gravity
	}

	
	// Label: RotatingDoor
	struct RotDoor {
		int32 zero
		float closedangle
		float openangle
		float speed
		int32 use physaxistype axis
		uint32 use doorstate state
		bool32 hardlimits
		float blocksound
		bool32 blockvision
		float pushmass
		vector closedposition
		vector openposition
		vector startposition
		alias short-vector startfacing
		float unknown
		int32 room [2]
		bool32 clockwise
		alias short-vector haltclose
		alias short-vector haltopen
	}

	
	// Label: ResearchReports
	struct RsrchRep {
		uint32 use researchreports reports
	}

	
	// Label: ResearchTime
	struct RsrchTime {
		int32 time
	}

	varstr RsrchTxt
	
	// Label: ModelScale
	struct Scale {
		float x
		float y
		float z
	}

	
	// Label: SchemaActionSound
	struct SchAction {
		char [16] label
	}

	
	// Label: SchemaAttenuationFactor
	struct SchAttFac {
		float attenuation
	}

	
	// Label: SchemaLastSample
	struct SchLastSa {
		int32 value
	}

	
	// Label: SchemaLoopParams
	struct SchLoopPa {
		uint8 use schemaloopflags flags
		uint8 maxsamples
		int16 loopcount
		int16 mininterval
		int16 maxinterval
	}

	
	// Label: SchemaMessage
	struct SchMsg {
		char [16] label
	}

	
	// Label: SchemaPlayParams
	struct SchPlayPa {
		uint16 use schemaplayflags flags = "0x7F00"
		uint16 use schemaaudioclass class
		int32 volume = "-1"
		int32 pan
		uint32 delay
		int32 fade
	}

	
	// Label: SchemaPriority
	struct SchPriori {
		int32 priority
	}

	
	// Label: Scripts
	struct Scripts {
		char [32] scripts [4]
		bool32 dontinherit
	}

	
	// Label: SelfIllumination
	struct SelfIllum {
		float brightness
	}

	
	// Label: DynamicLight
	struct SelfLit {
		int32 brightness
	}

	
	// Label: PlayerService
	struct Service {
		uint32 use servicetype service
	}

	varstr Sett1
	varstr Sett2
	
	// Label: Shadow
	struct Shadow {
		int32 intensity
	}

	
	// Label: ShakeStrength
	struct ShakeAmt {
		int32 strength
	}

	varstr SHead1
	varstr SHead2
	
	// Label: AIShockRanged
	struct ShkAIRang {
		int32 mindistance
		int32 maxdistance
		float firedelay
		uint32 use aircfrequency firewhilemoving
	}

	
	// Label: ShockWeaponType
	struct ShockWeap {
		uint32 use shockweapontype type
	}

	
	// Label: ShodanExplodeRange
	struct ShodanExp {
		float distance
	}

	
	// Label: Shove
	struct Shove {
		float x
		float y
		float z
	}

	
	// Label: ShowHP
	struct ShowHP {
		bool32 showhp
	}

	varstr SignalTyp
	
	// Label: SlayResult
	struct SlayResul {
		uint32 use slayresulttype mode
	}

	
	// Label: SoftwareLevel
	struct SoftLevel {
		int32 level
	}

	
	// Label: SoftwareType
	struct SoftType {
		uint32 use softwaretype type
	}

	
	// Label: SFXSpark
	struct Spark {
		uint32 flags
		uint16 color
		uint16 anglejitter
		uint16 angle [3]
		uint16 zero
		float size [3]
		float sizejitter
		float light
		float lightjitter
	}

	
	// Label: Spawn
	struct Spawn {
		char [64] type [4]
		int32 rarity [4]
		uint32 use spawnflags flags
		int32 count
	}

	
	// Label: SpeechLastPlayed
	struct SpchNextP {
		int32 value
	}

	
	// Label: SpeechVoice
	struct SpchVoice {
		char [16] label
	}

	
	// Label: CurrentSpeech
	struct Speech {
		uint32 flags
		int32 time
		int32 schema
		int32 concept
		int32 unknown
		uint32 handle
	}

	
	// Label: Spotlight
	struct Spotlight {
		float inner
		float outer
		float distance
	}

	
	// Label: StimSourceRandomize
	struct SrcRand {
		float factor
	}

	
	// Label: StackCount
	struct StackCoun {
		int32 count
	}

	
	// Label: StackIncrement
	struct StackInc {
		int32 count
	}

	
	// Label: MultilevelStartLocation
	struct StartLoc {
		int32 location
	}

	
	// Label: StimIsKnockout
	struct StimKO {
		bool32 isknockout
	}

	alias sttweqsimple StTweqBli
	alias sttweqsimple StTweqDel
	alias sttweqsimple StTweqEmi
	alias sttweqsimple StTweq2Em
	alias sttweqsimple StTweq3Em
	alias sttweqsimple StTweq4Em
	alias sttweqsimple StTweq5Em
	
	// Label: TweqJointsState
	struct StTweqJoi {
		uint16 use tweqstateflags anim
		uint16 use tweqnullflags misc
		uint32 use tweqstateflags joint [6]
	}

	
	// Label: TweqLockState
	struct StTweqLoc {
		uint16 use tweqstateflags anim
		uint16 use tweqnullflags misc
		float angle
		uint32 stage
	}

	alias sttweqsimple StTweqMod
	
	// Label: TweqRotateState
	struct StTweqRot {
		uint16 use tweqstateflags anim
		uint16 use tweqnullflags misc
		uint32 use tweqstateflags x
		uint32 use tweqstateflags y
		uint32 use tweqstateflags z
	}

	
	// Label: TweqScaleState
	struct StTweqSca {
		uint16 use tweqstateflags anim
		uint16 use tweqnullflags misc
		uint32 use tweqstateflags x
		uint32 use tweqstateflags y
		uint32 use tweqstateflags z
	}

	
	// Label: SwingExposure
	struct SwingExpo {
		int32 value
	}

	
	// Label: SwordActionType
	struct SwordActi {
		uint32 use swordactiontype mode
	}

	varstr SymName
	
	// Label: TargetType
	struct TargetTyp {
		uint32 use targettype type
	}

	
	// Label: TextureIndex
	struct TextureID {
		int32 index
	}

	
	// Label: RetextureRadius
	struct TextureRa {
		float distance
	}

	
	// Label: CreatureTimeWarp
	struct TimeWarp {
		float factor
	}

	
	// Label: Toxin
	struct Toxin {
		float amount
	}

	
	// Label: PlayerTraits
	struct TraitsDes {
		int32 use traittype trait [4]
	}

	
	// Label: TranslatingDoor
	struct TransDoor {
		int32 zero
		float closed
		float open
		float speed
		int32 use physaxistype axis
		uint32 use doorstate state
		bool32 hardlimits
		float blocksound
		bool32 blockvision
		float pushmass
		vector closedposition
		vector openposition
		vector startposition
		alias short-vector startfacing
		float unknown
		int32 room [2]
	}

	
	// Label: Transient
	struct Transient {
		bool32 value
	}

	
	// Label: TransluceRate
	struct TransRate {
		int32 speed
	}

	
	// Label: TrapControlFlags
	struct TripFlags {
		uint32 use tripwireflags flags
	}

	varstr UseCursor
	varstr UseMsg
	
	// Label: UseType
	struct UseType {
		uint32 use objectusetype type
	}

	
	// Label: VoiceIndex
	struct VoiceIdx {
		int32 voice
	}

	
	// Label: WaterColor
	struct WaterColo {
		uint8 red
		uint8 green
		uint8 blue
		uint8 zero
		float alpha
	}

	
	// Label: WeaponDamage
	struct WeaponDam {
		int32 damage
	}

	
	// Label: WeaponType
	struct WeaponTyp {
		int32 type
	}

	varstr WorldCurs
	
	// Label: WeaponExposure
	struct WpnExposu {
		int32 value
	}

	
	// Label: RendererZBias
	struct Z-Bias {
		int32 bias
	}

}

namespace links {
	
	// Label: AIAttack
	struct AIAttack {
		uint32 use aipriority priority = "3"
	}

	
	// Label: AIAwareness
	struct AIAwareness {
		int32 unknown1
		uint32 use aiawarenessflags flags
		uint32 use alertlevel level
		uint32 use alertlevel peaklevel
		int32 levelenter
		int32 lastcontact
		vector lastposition
		int32 unknown2
		int32 visioncone
		int32 lastupdate
		int32 lastseen
		int32 unknown3
		int32 lastfirsthand
		int32 freshness
	}

	
	// Label: AICamera
	struct AICamera {
		char [32] message
		char [32] data [3]
	}

	
	// Label: AIConversationActor
	struct AIConversationActor {
		int32 actor
	}

	
	// Label: AIDefendObject
	struct AIDefendObj {
		int32 unknown1 [14]
		uint32 use aispeed returnspeed = "3"
		int32 unknown2 [20]
		
		struct range [3] {
			int32 radius
			int32 height
			uint32 use alertlevel minalertness
			uint32 use alertlevel maxalertness
			int32 unknown3 [4]
		}

	}

	
	// Label: AIDoor
	struct AIDoor {
		int32 unknown
	}

	
	// Label: AIFleeDest
	struct AIFleeDest {
		int32 unknown
		bool32 reached
		int32 expiration
	}

	// Helper: AIFollowObject_Axis
	struct AIFollowObject_Axis {
		float angle
		int32 distance
	}
	
	// Label: AIFollowObject
	struct AIFollowObj {
		int32 unknown1 [2]
		
		alias AIFollowObject_Axis x
		alias AIFollowObject_Axis y
		alias AIFollowObject_Axis z
		
		int32 unknown2 [2]
	}

	
	// Label: AINoFlee
	struct AINoFlee {
		int32 expiration
	}

	
	// Label: AIProjectile
	struct AIProjectile {
		uint32 use aircconstraint constraint
		int32 data
		uint32 use aircmethod method = "1"
		uint32 use aircpriority priority = "2"
		float delay
		bool32 leading
		int32 ammo
		int32 burst
		uint32 use aircpriority accuracy = "2"
		uint32 use meshjoint joint
		int32 unknown [3]
	}

	alias AI_WtchPn AIWatchObj
	
	// Label: ARSourceLink
	struct arSrc {
		int32 sourcelink
		int32 starttime
		int32 count
	}

	
	// Label: Contains
	struct Contains {
		int32 use playercontaintype location
	}

	
	// Label: Corpse
	struct Corpse {
		bool32 propagatestim
	}

	
	// Label: CreatureAttachment
	struct CreatureAttachment {
		uint32 use meshjoint joint
		bool32 isweapon
		float unknown1
		int32 unknown2 [3]
		float unknown3
		int32 unknown4 [3]
		float unknown5
		int32 unknown6 [3]
	}

	
	// Label: CurrentWeapon
	struct CurWeapon {
		int32 unknown
	}

	
	// Label: Flinderize
	struct Flinderize {
		int32 count
		float impulse
		bool32 scatter
		vector offset
	}

	
	// Label: FlowContact
	struct FlowContact {
		int32 unknown [4]
	}

	
	// Label: FrobProxy
	struct FrobProxy {
		uint32 use frobproxyflags flags
	}

	
	// Label: GunFlash
	struct GunFlash {
		int32 vhot
		uint32 use gunflashflags flags
	}

	
	// Label: HitSpang
	struct HitSpang {
		int32 spangobj
	}

	
	// Label: HostObject
	struct HostObj {
		int32 unknown
	}

	
	// Label: LandingPoint
	struct LandingPoint {
		int32 location
	}

	
	// Label: Lock
	struct Lock {
		int32 unknown
	}

	
	// Label: Metaproperty
	struct MetaProp {
		int32 priority = "1024"
	}

	
	// Label: MissSpang
	struct MissSpang {
		bool32 normal
	}

	
	// Label: ParticleAttachment
	struct ParticleAttachement {
		uint32 use particleattachtype type
		int32 vhot
		uint32 joint
		int32 submodel
	}

	
	// Label: PhysAttachment
	struct PhysAttach {
		vector offset
	}

	
	// Label: PlayerFactory
	struct PlayerFactory {
		int32 unknown
	}

	
	// Label: Projectile
	struct Projectile {
		int32 order
		int32 setting
	}

	
	// Label: QuestBit
	struct Questbit {
		char [16] value
	}

	
	// Label: ReactParam
	struct ReactParam {
		int32 receptron
	}

	alias FlowContact ScriptContact
	
	// Label: ScriptParams
	struct ScriptParams {
		char [16] label
	}

	
	// Label: StimSensor
	struct StimSensor {
		int32 sensorcount
	}

	
	// Label: TerrainPath
	struct TPath {
		float speed
		int32 pausetime
		bool32 pathlimit
		int32 zero
	}

// }
// namespace stimsource { 

	enum arsourcetype : int {
		key "None" 0
		key "Contact" 1
		key "Radius" 2
		key "Flow" 3
		key "Script" 4
	}

	enum arsourcename : string {
		key "None" None
		key "Contact" Contact
		key "Radius" Radius
		key "Flow" Flow
		key "Script" Script
	}

	bitfield arsourcefieldflags {
		key "Shape" 1
		key "Lifecycle" 2
	}

	bitfield arlifecycleflags {
		key "No Max" 1
		key "Destroy On Completion" 2
	}

	bitfield arcontactflags {
		key "Collision" 0x001
		key "WorldFrob" 0x002
		key "InvFrob" 0x004
		key "InvFrob" 0x008
		key "ToolFrob Inv%2FWorld" 0x010
		key "ToolFrob Inv%2FInv" 0x020
		key "ToolFrob World%2FWorld" 0x040
		key "ToolFrob World%2FInv" 0x080
		key "Weapon Low" 0x800
		key "Weapon Med" 0x100
		key "Weapon High" 0x200
		key "Weapon Block" 0x400
	}

	bitfield arradiusflags {
		key "Line of Sight" 1
	}

	enum arradiustype : uint {
		key "None" 0
		key "Linear" 1
		key "Inverse Square" 2
	}

	
	// Label: ARSourceDescription
	struct arSrcDesc {
		int32 use arsourcetype sourcetype
		float intensity
		uint32 use arsourcefieldflags validfields
		
		union shape {
			// Label: Shape (Contact)
			struct shapecontact {
				uint32 use arcontactflags types
				float velocitycoeff
				float frobtimecoeff
				int32 zero [5]
			}

			// Label: Shape (Radius)
			struct shaperadius {
				float distance
				uint32 use arradiusflags flags
				uint32 use arradiustype dispersion
				int32 zero [5]
			}
		}
		
		// Label: Lifecycle
		struct lifecycle {
			uint32 use arlifecycleflags flags
			int32 period
			int32 maxfirings
			float slope
			int32 zero [4]
		}

		char [32] use arsourcename typename
	}

// }
// namespace reactions {

	bitfield receptronflags {
		key "No Min" 1
		key "No Max" 2
	}

	enum receptroneffects : string {
		key "None" None
		key "Abort" Abort
		key "Amplify" Amplify
		key "Stimulate" stimulate
		key "Script Message" stim_script_msg
		key "Tweq Control" tweq_control
		key "Set Quest Var" SetQvar
		key "Impact Result" impact_result
		key "Permeate" permeate
		key "Add Property" add_prop
		key "Remove Property" rem_prop
		key "Clone Properties" clone_props
		key "Add Metaproperty" add_metaprop
		key "Remove Metaproperty" rem_metaprop
		key "Change Model" set_model
		key "Create Object" create_obj
		key "Move Object" move_obj
		key "Frob Object" frob_obj
		key "Destroy Object" destroy_obj
		key "Slay Object" slay
		key "Damage" damage
		key "Freeze" Freeze
		key "Stun" Stun
		key "Weapon Hit" weapon_hit
		key "Weapon Block" weapon_block
		key "Env Sound" EnvSound
		key "Anim Light Off" light_off
		key "Anim Light On" light_on
		key "Radiate" radiate
		key "Toxin" toxin
	}

	enum reactionimpactresult : uint {
                key "Bounce" 2
                key "Stick" 3
                key "Slay" 4
        }

        bitfield reactionawarenessflags {
                key "Can't See" 1
                key "Can't Hear" 2
                key "Stunned" 4
                key "Not an AI" 8
        }



	struct none {
	}

	
	// Label: Receptron
	struct Receptron {
		int32 ordinal
		float minintensity
		float maxintensity
		uint32 use receptronflags flags
		char [32] use receptroneffects effect
		int32 target
		int32 agent
		
		union reaction {
			// Label: Amplify Stimulus
			struct amplify {
				float multiply
				float add
			}
		
			// Label: Stimulate Other
			struct stimulate {
				char [16] name
				float add
				float multiply
			}
		
			
			// Label: Script Message
			struct stim_script_msg {
				int32 refcount
				uint32 flags
			}
		
			
			// Label: Tweq Control
			struct tweq_control {
				uint32 type
				uint32 action
				uint32 use tweqanimflags anim
				int32 zero
			}
		
			// Label: Set Quest Variable
			struct setqvar {
				char [28] name
				uint16 operation
				int16 value
			}
			
			// Label: Impact Result
			struct impact_result {
				uint32 use reactionimpactresult type
			}
		
			
			// Label: Permeate Into Container
			struct permeate {
				float coefficient
				float magnitude
			}
		
			
			// Label: Add Property
			struct add_prop {
				char [16] name
			}
		
			
			// Label: Remove Property
			struct rem_prop {
				char [16] name
			}
		
			
			// Label: Create Object
			struct create_obj {
				vector position
				float heading
				float pitch
				float bank
			}
		
			
			// Label: Move Object
			struct move_obj {
				vector position
				float heading
				float pitch
				float bank
			}
		
			
			// Label: Damage
			struct damage {
				int32 add
				int32 type
				float multiply
				bool32 stimtype
			}
		
			
			// Label: Change Model
			struct set_model {
				char [16] name
			}
		
			// Label: Freeze
			struct freeze {
				int32 duration
			}
		
			// Label: Stun
			struct stun {
				int32 duration
				char [28] tags
			}

			
			// Label: Environmental Sound
			struct envsound {
				char [32] tags
			}

			
			// Label: Radiate
			struct radiate {
				float increment
			}
		
			// Label: Null Reaction
			alias none none
			alias none abort
			alias none add_metaprop
			alias none rem_metaprop
			alias none destroy_obj
			alias none frob_obj
			alias none slay
			alias none clone_props
			alias none weapon_hit
			alias none weapon_block
			alias none toxin
			alias none light_off
			alias none light_on
		}
	}
}

namespace chunks {
	// Helper: AI Acuity
	struct AI_Acuity {
		float lighting
		float movement
		float exposure
	}
	
	// Label: AIAcuitySet
	struct AIACS {
		alias AI_Acuity normal
		alias AI_Acuity peripheral
		alias AI_Acuity omni
		alias AI_Acuity lightonly
		alias AI_Acuity moveonly
		alias AI_Acuity lowlight
	}

	
	// Label: AICreatureSizes
	struct AICRTSZ {
		
		struct type [8] {
			float width
			float height
		}

	}

	
	// Label: AIHearingStats
	struct AIHearStat {
		
		// Label: Multiply (first)
		struct multiply {
			float null
			float verylow
			float low
			float normal
			float high
			float veryhigh
		}

		
		// Label: Add (second)
		struct add {
			int32 null
			int32 verylow
			int32 low
			int32 normal
			int32 high
			int32 veryhigh
		}

	}

	
	// Label: AISoundTweaks
	struct AISNDTWK {
		int32 untyped
		int32 inform
		int32 minor
		int32 major
		int32 noncombat
		int32 combat
	}

	
	// Label: BashVelocityVars
	struct BASH {
		float threshold
		float coefficient
	}

	
	// Label: DarkCombatVars
	struct DARKCOMBAT {
		int32 backstab
		float mindistance
	}

	
	// Label: DifficultyBaseStats
	struct DIFFPARAM {
		float upgrade_mult [6]
		int32 base_health [6]
		int32 endurance_add [6]
		int32 base_psi [6]
		int32 psi_add [6]
		int32 loot_hose [6]
		float rep_cost [6]
	}

	
	// Label: GamesysEAXDefaults
	struct GameSysEAX {
		uint32 use eaxtype eax
		int32 dampening
		int32 heightoverride
	}

	
	// Label: ElevatorLevels
	struct Elev {
		char [64] deck [5]
	}

	
	// Label: GameParams
	struct GAMEPARAM {
		float power
		float bash [8]
		float speed [8]
		float overlay_dist
		float frob_dist
	}

	
	// Label: GunAnimation
	struct GUNANIM {
		int16 swing_size
		int32 swing_time
		int16 swing_speed
		float bob_size
		float bob_speed
		int16 raise_speed
		uint16 raised
		uint16 lowered
		float wobble
	}

	// Label: Failure Bonus
	struct HRM_bonus {
		int32 skill
		int32 stat
	}
	
	// Label: TechParams
	struct HRM {
		alias HRM_bonus critfail
		alias HRM_bonus success
		float break_chance [8]
	}

	
	// Label: ImplantParams
	struct IMPLPARAM {
		int32 vis_multiply
	}

	
	// Label: MapFile
	struct MAP_FILE {
		char [256] name
	}

	
	// Label: MeleeStrength
	struct MELEESTR {
		int32 strength [8]
	}

	
	// Label: OverloadParams
	struct OLPARAM {
		float burn_factor [8]
		float burn_time [5]
		float psi_threshold [8]
		int32 damage
	}

	
	// Label: PsiCost
	struct PSICOST {
		
		// Label: Level 1
		struct level1 {
			int32 cost0
			int32 cost1
			int32 cost2
			int32 cost3
			int32 cost4
			int32 cost5
			int32 cost6
			int32 cost7
		}

		
		// Label: Level 2
		struct level2 {
			int32 cost0
			int32 cost1
			int32 cost2
			int32 cost3
			int32 cost4
			int32 cost5
			int32 cost6
			int32 cost7
		}

		
		// Label: Level 3
		struct level3 {
			int32 cost0
			int32 cost1
			int32 cost2
			int32 cost3
			int32 cost4
			int32 cost5
			int32 cost6
			int32 cost7
		}

		
		// Label: Level 4
		struct level4 {
			int32 cost0
			int32 cost1
			int32 cost2
			int32 cost3
			int32 cost4
			int32 cost5
			int32 cost6
			int32 cost7
		}

		
		// Label: Level 5
		struct level5 {
			int32 cost0
			int32 cost1
			int32 cost2
			int32 cost3
			int32 cost4
			int32 cost5
			int32 cost6
			int32 cost7
		}

	}

	
	// Label: SkillParams
	struct SKILLPARAM {
		int16 inaccuracy
		float break_mod
		float research_factor
		float weapon_damage
		float organ_damage
	}

	
	// Label: StatUpgradeCost
	struct STATCOST {
		int32 strength [5]
		int32 endurance [5]
		int32 psi [5]
		int32 agility [5]
		int32 cyber [5]
	}

	
	// Label: StatParams
	struct STATPARAM {
		int32 health_start
		int32 health_add
		int32 psi_start
		int32 psi_add
		float vis_min
		float vis_max
		float hazard [8]
	}

	
	// Label: TraitBonuses
	struct TRAITPARAM {
		int32 tank_bonus
		float sharpshooter
		float lethalweapon
	}

	
	// Label: WeaponSkillCost
	struct WSKILLCOST {
		int32 conventional [6]
		int32 energy [6]
		int32 heavy [6]
		int32 alien [6]
	}

	
	// Label: TechSkillCost
	struct WTECHCOST {
		int32 hack [6]
		int32 repair [6]
		int32 modify [6]
		int32 maintain [6]
		int32 research [6]
	}

	
	// Label: AIPathOption
	struct AIPATHVAR {
		bool32 pathwater
	}

	
	// Label: AlarmCountdown
	struct ALARMCOUNT {
		int32 time
	}

	
	// Label: Ambient
	struct AMBIENT {
		int32 unknown
	}

	
	// Label: BindTable
	struct BINDTABLE {
		int32 unknown [12]
	}

	
	// Label: MiscData
	struct MISCDATA {
		int32 unknown
	}

	
	// Label: BrushHeader
	struct BRHEAD {
		char [16] creator
		char [16] lastsave
		uint32 unknown1 [16]
		int32 gridsize
		bool32 showgrid
		uint32 shading
		uint32 unknown2
		bool32 usegrid
		uint32 time
	}

	
	// Label: ExploredAreas
	struct EXPLORED {
		uint8 areas [64]
	}

	
	// Label: PDAHistory
	struct LOGTIMES {
		int32 unknown
		int32 extra [64]
	}

	
	// Label: HUDMapParams
	struct MAPPARAM {
		bool32 rotate_hack
	}

	alias GameSysEAX MissionEAX
	
	// Label: MessageHistory
	struct MSGHISTORY {
		char [255] message [18]
		int32 unknown [18]
	}

	
	// Label: WaterColors
	struct WATERBANKS {
		
		struct color [4] {
			int8 red
			int8 green
			int8 blue
			int8 zero
			float alpha
		}

	}

	
	// Label: FlowTextureColors
	struct FLOW_TEX {
		
		struct flow [256] {
			int16 in_texture
			int16 out_texture
			char [28] name
		}

	}

	
	// Label: CellMotion
	// struct CELL_MOTION {
	// 	
	// 	struct anchor [256] {
	// 		vector position
	// 		alias short-vector rotation [256]
	// 		uint32 flags
	// 		int16 use physaxistype axis
	// 		int8 zero
	// 	}
	// 
	// 	
	// 	struct delta [256] {
	// 		vector position
	// 		alias short-vector rotation [256]
	// 	}
	// 
	// }

	
	// Label: PsiTrain(?)
	struct PSITRAIN {
		int32 unknown
	}

	
	// Label: RenderParams
	struct RENDPARAMS {
		char [16] paletteres
		float ambient
	}

	
	// Label: BackgroundTheme
	struct SONGTHEME {
		char [32] name
	}

	
	// Label: BackgroundMusic
	struct SONGPARAMS {
		char [32] name
	}

	
	// Label: SkyRenderMode
	struct SKYMODE {
		uint32 type
	}

	
	// Label: SaveDescription
	struct SAVEDESC {
		char [1024] description
		char [32] mission
		int32 extra
	}

	
	struct MiniGameScores {
		
		struct scores [10] {
			int32 points
			char [128] desc
		}

	}

	alias MiniGameScores AbyssScr
	alias MiniGameScores BaconScr
	alias MiniGameScores GolfScr
	alias MiniGameScores HoggerScore
	alias MiniGameScores OWScores
	alias MiniGameScores RacerScr
	alias MiniGameScores StackerScr
}
