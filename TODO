This is a TODO for openDarkEngine
---------------------------------

Pre-0.3 release:
    
    * Code cleanup
    * cleanup of WorldRep service. New style of struct reading using the signatures should be used
    * new main.cpp - preferably only a small wrapper for python scripts to be executed with
    * propper Big/Little endian handling for DType/DTypeDef classes (and OPDE in general). This (together with some other fixes) should enable the code to run on non-intel macs and other architectures
    * Finalization of the core services bindings, coupled with Doc strings to make coder's life easier
    * installation scripts / win32 installer - should also prepare opde's config files to be ready to rock after install
    * better handling of missing data
    * ogre's (and others) resource system management. How to organize resource unloading? How to classify loaded data? Those need to be answered
    * small clarifications of the methods working with property/link data - what the data flow will be? getData can return archetype's data, so changes should be disallowed on that returned object
    * Testing: for example how to correctly (and legally) transfer python's lib together with opde, bug fixes for opde if it does not find data it needs
    * Example scripts to the SVN - resources.cfg, opde.cfg, plugins.cfg, etc should be placed in SVN to ease the pain for people trying to build from source
    * Other example scripts/documentation, including FAQ - How do I create a custom material replacement? How do I create a mesh replacement? (...New movements for AI?...)
    * optional: Optimization. The new SM for example does not perform so well one could be satisfied with it.
    * Built-in properties: To stop the opde from failing fatally if the core sripts are corrupted/missing, the property/link/binary data specifications could be created in code (including the DTypeDef 
	format descriptor).  This can be accomplished for example with a header file generator that would convert the .pldef and .dtype scripts	into included routines. 
	Not terribly hard to do, and would simply mean one preprocessing step - (1) compile the converter, (2) convert the files (somewhat simmilar to GUI code generators) 
	generating .h or .cpp files, then compiled in as libGAMEData where GAME is one of the games (Thief1,Thief2,Shock2). Result: Routines accessible to the python
	code or bootstrap code, setting up the binary definitions/properties/links.
	
    * DTypeDef cleanup: It now seems we can safely swap endianness of DTypeDef supported data. This means we can do all the byte mumbo-jumbo whilst loading, and have a cleaner get/set code.
	- need to be 100% sure here - there are some unions present
	(Also an option: Getting rid of the DType structures altogether, using linear array of field lists with type. Bit more work, result would be much more simmilar to Dark's original impl.)
    * Cleanup in the error handling - how to report errors, how to handle exceptions to Python
    * Object construction has some pending changes: Link definition should get clone/instantinate style attribute (clone target as well, clone link/leave archetype target id, discard link)
	- see the Thief1 (2?) Torch. In fact any archetype with particleAttachment. Then see T2's Flinderize link. Both have non-standard object instantination behavior.
    * SceneNode should be moved to RenderSystem again. The current position in the object service was too much a shortcut.
	* Here are some thoughts: both Position property setting and call to the ObjectService::setPosition/Orientation should end up calling position listeners(only once)!
	* some internal caching of the object->position and object->orientation can be done in object service, but not needed (too much data duplication)
	* Physics service has the ability to stop controling certain parts of the object's orientation/position. Need more info here - what does setPosition in obj. service do with it
	* AND how the physics service should update the position of the object (in fact any service)?
	    - seems the best way is that phys. service is a listener to the position/orientation of the object. when needing to set the position/orientation, it will call ObjService::setPos/Ori
    * Decoupling of data representation and access. No more should the code be based on DType and DTypeDef classes (can be, but only internally).
    * DTypeDef should have the variable length data option removed. There is property definition parameter designed just for that, and a dedicated variable length string data storage as well
    * Redesign and reimplementation of some core properties. Those should be marked internal and be hardcoded.
    * Possibility of property storage and implementation to be separate (for tools). This is done partially using optionality of the renderer listeners, but blind option for property group/data storage should do it better. That means core properties can reflect the values if blind is false as well.
    * Basic type data storages - float data storage, integer data storage, bool data storage (binary array based)
    * Advanced - structured templated data storage - something to be easilly personalised for the use with internal properties/link data that are structured (Property position for example). 
    * On-the-fly max/min object id resets - should be partially implemented, but binary arrays need to be reallocated/repopulated then, this has to work (at least for editor mode)
    * Documentation - how to implement code that makes the property live. How to implement contstraints between various properties.
    * Fog rendering - the one of the last rendering problems to be solved. Fog lives in the scenemanager, but we need to render our geometry twice - once the part that is fogged, once the part that is not fogged. 
	How this works in original dark remains to be revealed - non-fogged geometry seen through a fogged area is a small example. Maybe this uses some kind of volumetric fog. The author of DDFix - TimeSlip - should know more.


0.3 - 0.4:
    * Object Scripts. The whole infrastructure - Script Service, script message struct. Need more info/ideas here.
    * in parallel to that (to test the system on something): 
    	- Room service (probably the easiest, so should be the first)
	- A/R system
	- Physics
    * Sound system - need a propper resource system for this one, lots of data will travel because of this one


----------------------------------
- Some random side-project ideas -
----------------------------------

Documentation
-------------
We have the doxy system running (needs updating the comments though). Texinfo file with data flow descriptions, coding style descriptions, how-to guide, etc
should be written.


Documentation generator for Properties, links and chunk formats
---------------------------------------------------------------

Preferably generating texinfo files. Should run game's core without any graphics, collect data on properties/links/chunks
A detail holding text file should be possible to load, so there could be more than just the basic look of property or link described.

Example of such doc extension format (formal format specification needed):

Prop.ModelName {
    Holds the name of object's model. Implemented in RenderService. 
    
    Changing this property will result in object's model change.
    
    ... etc ...
}


The documentation generator should then produce a texinfo file that could be compiled into info, html and other formats.
Up to three different structure descriptions would be introduced, one for each different game type (or a collored diff).


Preprocessor for .pldef and .dtype script files
-----------------------------------------------

A preprocessor with a C style syntax (simple is sufficient) could be introduced to help with merging of the 3 different versions of property, link and data
description scripts. It would be feeded with a preprepared set of variables (integer variables should be enough). Should handle simple condition evaluation.
File processing would then be done using a stack based machine, that would evaluate #if, #else, #endif lines. 

VERSION variable should be introduced, that would be the base for the preprocessor. #define statement could be used to create new variables for the preprocessor,
#ifdef, #ifndef statements the same as in C could also be used if needed.

VERSION variable should be based on the internal (not in existance so far) config variable that should change the behavior of the whole engine. Values:

VERSION - MEANING
1         TDP/TG
2         TMA
3         SS2


The whole idea is to create a single set of scripts with the differences wrapped up in the #if, #endif conditions:

#if VERSION>=2

// include some stuff that is only
#else
#endif

Other statements could be also introduced, but I believe these will be more than sufficient:
#if CONDITION
 - tests for condition (allowed are: rounded braces, variables, spaces, logical expressions - &&,||, numerical >,<,>=,<=)
#else
 - else part for the condition
#endif
 - ends the conditionally included code
#define VAR VAL
 - will set a value VAL to a variable VAR, creating it if it did not exist (no macro style replacement will be allowed - too complex to do I believe)
#ifdef VAR
 - same as if, only test for variable's existance itself
#ifndef VAR
 - same as if, only test for variable's inexistance itself
#undef
 - undefines a variable
 
 
Editor side-Project
-------------------

An editor (codename CamelEd ;) ) could be created. The basic operations should not be a problem to implement, as there already is the whole object system
roughly prepared for that. Basing it on WxPython could be a good idea. 

TO BE SPECIFIED

some ideas:
*   Logger could get a brother - error reporter. Slightly more complex, conditionally compiled code present in whole OPDE would enable an existence of Error
    console, which could be even used for finding what went wrong in game mode - Message broadcasts, etc. Let it be 64 different data sources, and create a 
    filter for the messages, so user could choose which messages are interesting.
*   Custom BSP builder and lighter should enable us to introduce better graphics. Some brushes could be marked as detail brushes for example - meaning those 
    would not be used for occlusion
*   World geometry import - a special kind of brush maybe?
*   Custom WRRGB variant to implement this all

Need inspiration for other ideas. These listed are just some random dumb ideas that I came with. DromEd users should know better what they need 
(if they need a DromEd replacement, that is)

OPDE as a python extension
--------------------------

Ok, the 0.3 version release should include a python script using opde python module to implement the particular game. The principle is to use python's
library with our binary. We could also (and it would be a good idea) introduce the whole OPDE as a python Extension, meaning it would install into the 
pythons extensions, and an ordinary python editor/debugger could then be used to work on OPDE. 

Should not be so much work:
 * completely give the initialization of OPDE to the Python's side (meaning all the resource paths, etc would be configured by python script, including the 
    call to bootstrapFinished). This even means the whole OPDE could be initialized and shutted down numerous times per one script execution.
 * wrap it all up as a python extension compiled as a shared library
 * custom compiler flags remain an unknown here - as well as cmake as an alternative to setup.py ordinary extension build tool - INFO NEEDED here